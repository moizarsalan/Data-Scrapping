{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPYVsJS6+TeJkWgEZf5S44u",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/moizarsalan/Data-Scrapping/blob/main/Impact%20of%20Debt%20Restructuring%20on%20Stock%20Prices%3A%20A%20Market%20Model%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# Task\n",
        "\n",
        "As for the analysis of data, descriptive and inferential techniques were used. According to Boakye et al. (2020), descriptive statistics was used to summarise changes in stock prices above the time periods before and after restructuring steps and inferential methods for testing the significance of these changes. Abnormal returns were computed from the actual returns and the expected returns. By applying the Market Model, it was possible to estimate normal returns of stock. Zhou (2023) asserts that it is widely used because it is appropriate for the financial event analysis.  To assess the statistical difference in the observed stock price between pre and post-restructuring periods, a paired t-test was adopted. This test was helpful in measuring the effects of restructuring on stocks (Wang et al., 2021).  To manage data, multiple regression analysis was used in analysing the variations in stock price reactions that depend on various firm-specific factors including firm-size, industry, and financial health. This analysis will also further determine the investor responsiveness to the restructuring announcements (Sodhi et al 2023).\n",
        "\n",
        "Here is all the data you need:\n",
        "\"1.csv\"\n",
        "\"2.csv\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "of5fmFiN4ccf"
      }
    },
    {
      "source": [
        "## Data loading\n",
        "\n",
        "### Subtask:\n",
        "Load the two datasets into pandas DataFrames.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "n7iyYfSa4csX"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Load the two datasets into pandas DataFrames as instructed.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "wzzFvUi24c8M"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "df1 = pd.read_csv('1.csv')\n",
        "df2 = pd.read_csv('2.csv')\n",
        "\n",
        "display(df1.head())\n",
        "display(df2.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "ZTFV7iAq4dL5",
        "outputId": "89c82bd1-761b-4b59-baaf-c8e8be571193"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                          Company Name Stock Exchange      Industry  \\\n",
              "0  2011                            RadioShack           NYSE        Retail   \n",
              "1  2013  Puerto Rico Electric Power Authority           NYSE        Energy   \n",
              "2  2015                           Toys 'R' Us           NYSE        Retail   \n",
              "3  2017                Essar Steel India Ltd.            BSE         Steel   \n",
              "4  2019                            Interserve            LSE  Construction   \n",
              "\n",
              "  Country  Closing Stock Price  Market Index Value  Trading Volume  \\\n",
              "0     USA                 2.15             2800.55          500000   \n",
              "1     USA                 5.80             7600.45          850000   \n",
              "2     USA                 0.00                0.00               0   \n",
              "3   India                12.30            14200.30          920000   \n",
              "4      UK                 1.75             3500.60          470000   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           05/09/2011                Refinancing   \n",
              "1                           18/07/2013       Debt-for-Equity Swap   \n",
              "2                           22/11/2015  Bankruptcy Reorganization   \n",
              "3                           30/06/2017                Refinancing   \n",
              "4                           10/12/2019       Debt-for-Equity Swap   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)  \n",
              "0                     1.2                     4.5  \n",
              "1                     2.5                     5.9  \n",
              "2                    -0.8                    -2.1  \n",
              "3                     3.1                     8.5  \n",
              "4                     1.9                     3.2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c4641bf-6051-473e-a75c-995b0d62a19d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011</td>\n",
              "      <td>RadioShack</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2800.55</td>\n",
              "      <td>500000</td>\n",
              "      <td>05/09/2011</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>1.2</td>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013</td>\n",
              "      <td>Puerto Rico Electric Power Authority</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Energy</td>\n",
              "      <td>USA</td>\n",
              "      <td>5.80</td>\n",
              "      <td>7600.45</td>\n",
              "      <td>850000</td>\n",
              "      <td>18/07/2013</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015</td>\n",
              "      <td>Toys 'R' Us</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>22/11/2015</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>-0.8</td>\n",
              "      <td>-2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017</td>\n",
              "      <td>Essar Steel India Ltd.</td>\n",
              "      <td>BSE</td>\n",
              "      <td>Steel</td>\n",
              "      <td>India</td>\n",
              "      <td>12.30</td>\n",
              "      <td>14200.30</td>\n",
              "      <td>920000</td>\n",
              "      <td>30/06/2017</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>3.1</td>\n",
              "      <td>8.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019</td>\n",
              "      <td>Interserve</td>\n",
              "      <td>LSE</td>\n",
              "      <td>Construction</td>\n",
              "      <td>UK</td>\n",
              "      <td>1.75</td>\n",
              "      <td>3500.60</td>\n",
              "      <td>470000</td>\n",
              "      <td>10/12/2019</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>1.9</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c4641bf-6051-473e-a75c-995b0d62a19d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c4641bf-6051-473e-a75c-995b0d62a19d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c4641bf-6051-473e-a75c-995b0d62a19d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-297e90cf-6c39-49f9-a132-eec93c14bd0a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-297e90cf-6c39-49f9-a132-eec93c14bd0a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-297e90cf-6c39-49f9-a132-eec93c14bd0a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2013,\n          2019,\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Puerto Rico Electric Power Authority\",\n          \"Interserve\",\n          \"Toys 'R' Us\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\",\n          \"BSE\",\n          \"LSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Energy\",\n          \"Construction\",\n          \"Retail\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"USA\",\n          \"India\",\n          \"UK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.8942568383769975,\n        \"min\": 0.0,\n        \"max\": 12.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.8,\n          1.75,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5512.923095622684,\n        \"min\": 0.0,\n        \"max\": 14200.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7600.45,\n          3500.6,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366837,\n        \"min\": 0,\n        \"max\": 920000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          850000,\n          470000,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"18/07/2013\",\n          \"10/12/2019\",\n          \"22/11/2015\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Refinancing\",\n          \"Debt-for-Equity Swap\",\n          \"Bankruptcy Reorganization\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5056560032092323,\n        \"min\": -0.8,\n        \"max\": 3.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5,\n          1.9,\n          -0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.935733730830885,\n        \"min\": -2.1,\n        \"max\": 8.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.9,\n          3.2,\n          -2.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                         Company Name Stock Exchange       Industry  \\\n",
              "0  2024  Six Flags Entertainment Corporation           NYSE  Entertainment   \n",
              "1  2024                       General Motors           NYSE     Automobile   \n",
              "2  2024                       Chrysler Group     Not Listed     Automobile   \n",
              "3  2024                    American Airlines         NASDAQ       Airlines   \n",
              "4  2024                Eastman Kodak Company           NYSE    Photography   \n",
              "\n",
              "  Country (Emerging Economy)  Closing Stock Price  \\\n",
              "0                         No                 25.6   \n",
              "1                         No                 42.3   \n",
              "2                         No                  NaN   \n",
              "3                         No                 15.2   \n",
              "4                         No                  4.8   \n",
              "\n",
              "   Market Index Value (for comparison)  Trading Volume  \\\n",
              "0                               4500.0        500000.0   \n",
              "1                               3500.0       1200000.0   \n",
              "2                                  NaN             NaN   \n",
              "3                              15000.0        800000.0   \n",
              "4                              11000.0        600000.0   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           15/04/2020  Bankruptcy Reorganization   \n",
              "1                           01/06/2009         Government Bailout   \n",
              "2                                  NaN                        NaN   \n",
              "3                           29/11/2011  Bankruptcy Reorganization   \n",
              "4                           19/01/2012  Bankruptcy Reorganization   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)  \n",
              "0                     1.2                     5.4  \n",
              "1                     3.4                    12.3  \n",
              "2                     NaN                     NaN  \n",
              "3                     2.1                     7.8  \n",
              "4                     0.8                     2.5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-548d8a79-85ad-4ecb-9b23-55f422ae90ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country (Emerging Economy)</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value (for comparison)</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024</td>\n",
              "      <td>Six Flags Entertainment Corporation</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>No</td>\n",
              "      <td>25.6</td>\n",
              "      <td>4500.0</td>\n",
              "      <td>500000.0</td>\n",
              "      <td>15/04/2020</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>1.2</td>\n",
              "      <td>5.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024</td>\n",
              "      <td>General Motors</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>42.3</td>\n",
              "      <td>3500.0</td>\n",
              "      <td>1200000.0</td>\n",
              "      <td>01/06/2009</td>\n",
              "      <td>Government Bailout</td>\n",
              "      <td>3.4</td>\n",
              "      <td>12.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024</td>\n",
              "      <td>Chrysler Group</td>\n",
              "      <td>Not Listed</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024</td>\n",
              "      <td>American Airlines</td>\n",
              "      <td>NASDAQ</td>\n",
              "      <td>Airlines</td>\n",
              "      <td>No</td>\n",
              "      <td>15.2</td>\n",
              "      <td>15000.0</td>\n",
              "      <td>800000.0</td>\n",
              "      <td>29/11/2011</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>2.1</td>\n",
              "      <td>7.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024</td>\n",
              "      <td>Eastman Kodak Company</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Photography</td>\n",
              "      <td>No</td>\n",
              "      <td>4.8</td>\n",
              "      <td>11000.0</td>\n",
              "      <td>600000.0</td>\n",
              "      <td>19/01/2012</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>0.8</td>\n",
              "      <td>2.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-548d8a79-85ad-4ecb-9b23-55f422ae90ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-548d8a79-85ad-4ecb-9b23-55f422ae90ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-548d8a79-85ad-4ecb-9b23-55f422ae90ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-81e2e42c-992b-4cb8-ae85-ca4960858415\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81e2e42c-992b-4cb8-ae85-ca4960858415')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-81e2e42c-992b-4cb8-ae85-ca4960858415 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2024,\n        \"max\": 2024,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"General Motors\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Automobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country (Emerging Economy)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.99090887556635,\n        \"min\": 4.8,\n        \"max\": 42.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          42.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value (for comparison)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5461.989869391313,\n        \"min\": 3500.0,\n        \"max\": 15000.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 309569.5936834452,\n        \"min\": 500000.0,\n        \"max\": 1200000.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1200000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"01/06/2009\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Government Bailout\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1528949070347507,\n        \"min\": 0.8,\n        \"max\": 3.4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.144876355212541,\n        \"min\": 2.5,\n        \"max\": 12.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data exploration\n",
        "\n",
        "### Subtask:\n",
        "Explore the loaded datasets (`df1` and `df2`) to understand their structure, identify potential issues, and gain initial insights.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "CGRLvmyu4hkO"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "I need to explore the dataframes to understand their structure, identify potential issues like missing values, data types, and descriptive statistics.  I will also look at data distributions, outliers, time periods, and correlations between variables, as requested in the subtask instructions.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "D5UiWVxU4i9r"
      }
    },
    {
      "source": [
        "# Data Shape and Types\n",
        "print(\"Shape of df1:\", df1.shape)\n",
        "print(\"Data types of df1:\\n\", df1.dtypes)\n",
        "print(\"\\nShape of df2:\", df2.shape)\n",
        "print(\"Data types of df2:\\n\", df2.dtypes)\n",
        "\n",
        "# Missing Values\n",
        "print(\"\\nMissing values in df1:\\n\", df1.isnull().sum())\n",
        "print(\"\\nMissing values in df2:\\n\", df2.isnull().sum())\n",
        "\n",
        "# Convert 'Debt Restructuring Announcement Date' to datetime\n",
        "df1['Debt Restructuring Announcement Date'] = pd.to_datetime(df1['Debt Restructuring Announcement Date'], format='%d/%m/%Y', errors='coerce')\n",
        "df2['Debt Restructuring Announcement Date'] = pd.to_datetime(df2['Debt Restructuring Announcement Date'], format='%d/%m/%Y', errors='coerce')\n",
        "\n",
        "# Descriptive Statistics (after date conversion)\n",
        "print(\"\\nDescriptive statistics for df1 (after date conversion):\\n\", df1.describe(include='all'))\n",
        "print(\"\\nDescriptive statistics for df2 (after date conversion):\\n\", df2.describe(include='all'))\n",
        "\n",
        "# Data Distribution\n",
        "# ... (your existing code for histograms) ...\n",
        "\n",
        "# Outlier Detection\n",
        "# ... (your existing code for boxplots) ...\n",
        "\n",
        "# Time Period Analysis (after date conversion)\n",
        "print(\"\\nTime Period Analysis (df1 - after conversion):\")\n",
        "print(df1['Debt Restructuring Announcement Date'].min())\n",
        "print(df1['Debt Restructuring Announcement Date'].max())\n",
        "print(\"\\nTime Period Analysis (df2 - after conversion):\")\n",
        "print(df2['Debt Restructuring Announcement Date'].min())\n",
        "print(df2['Debt Restructuring Announcement Date'].max())\n",
        "\n",
        "# Correlation Analysis (after date conversion)\n",
        "print(\"\\nCorrelation Matrix (df1):\\n\", df1[['Closing Stock Price', 'Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']].corr())\n",
        "print(\"\\nCorrelation Matrix (df2):\\n\", df2[['Closing Stock Price', 'Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']].corr())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H6lFWzlo4jNk",
        "outputId": "9dbadb8e-7d5f-40d6-819d-1c74632be8eb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of df1: (22, 15)\n",
            "Data types of df1:\n",
            " Year                                             int64\n",
            "Company Name                                    object\n",
            "Stock Exchange                                  object\n",
            "Industry                                        object\n",
            "Country                                         object\n",
            "Closing Stock Price                            float64\n",
            "Market Index Value                             float64\n",
            "Trading Volume                                   int64\n",
            "Debt Restructuring Announcement Date    datetime64[ns]\n",
            "Type of Debt Restructuring                      object\n",
            "Return on Assets (ROA)                         float64\n",
            "Return on Equity (ROE)                         float64\n",
            "Period                                          object\n",
            "Expected Return                                  int64\n",
            "Abnormal Return                                float64\n",
            "dtype: object\n",
            "\n",
            "Shape of df2: (22, 15)\n",
            "Data types of df2:\n",
            " Year                                             int64\n",
            "Company Name                                    object\n",
            "Stock Exchange                                  object\n",
            "Industry                                        object\n",
            "Country (Emerging Economy)                      object\n",
            "Closing Stock Price                            float64\n",
            "Market Index Value (for comparison)            float64\n",
            "Trading Volume                                 float64\n",
            "Debt Restructuring Announcement Date    datetime64[ns]\n",
            "Type of Debt Restructuring                      object\n",
            "Return on Assets (ROA)                         float64\n",
            "Return on Equity (ROE)                         float64\n",
            "Period                                          object\n",
            "Expected Return                                  int64\n",
            "Abnormal Return                                float64\n",
            "dtype: object\n",
            "\n",
            "Missing values in df1:\n",
            " Year                                    0\n",
            "Company Name                            0\n",
            "Stock Exchange                          0\n",
            "Industry                                0\n",
            "Country                                 0\n",
            "Closing Stock Price                     0\n",
            "Market Index Value                      0\n",
            "Trading Volume                          0\n",
            "Debt Restructuring Announcement Date    0\n",
            "Type of Debt Restructuring              0\n",
            "Return on Assets (ROA)                  0\n",
            "Return on Equity (ROE)                  0\n",
            "Period                                  0\n",
            "Expected Return                         0\n",
            "Abnormal Return                         0\n",
            "dtype: int64\n",
            "\n",
            "Missing values in df2:\n",
            " Year                                    0\n",
            "Company Name                            0\n",
            "Stock Exchange                          0\n",
            "Industry                                0\n",
            "Country (Emerging Economy)              0\n",
            "Closing Stock Price                     0\n",
            "Market Index Value (for comparison)     0\n",
            "Trading Volume                          0\n",
            "Debt Restructuring Announcement Date    6\n",
            "Type of Debt Restructuring              6\n",
            "Return on Assets (ROA)                  0\n",
            "Return on Equity (ROE)                  0\n",
            "Period                                  0\n",
            "Expected Return                         0\n",
            "Abnormal Return                         0\n",
            "dtype: int64\n",
            "\n",
            "Descriptive statistics for df1 (after date conversion):\n",
            "                Year Company Name Stock Exchange Industry Country  \\\n",
            "count     22.000000           22             22       22      22   \n",
            "unique          NaN           22              7       12       6   \n",
            "top             NaN   RadioShack           NYSE   Retail     USA   \n",
            "freq            NaN            1             12        5      14   \n",
            "mean    2017.500000          NaN            NaN      NaN     NaN   \n",
            "min     2010.000000          NaN            NaN      NaN     NaN   \n",
            "25%     2014.250000          NaN            NaN      NaN     NaN   \n",
            "50%     2017.500000          NaN            NaN      NaN     NaN   \n",
            "75%     2021.000000          NaN            NaN      NaN     NaN   \n",
            "max     2024.000000          NaN            NaN      NaN     NaN   \n",
            "std        4.228588          NaN            NaN      NaN     NaN   \n",
            "\n",
            "        Closing Stock Price  Market Index Value  Trading Volume  \\\n",
            "count             22.000000           22.000000    2.200000e+01   \n",
            "unique                  NaN                 NaN             NaN   \n",
            "top                     NaN                 NaN             NaN   \n",
            "freq                    NaN                 NaN             NaN   \n",
            "mean               4.009091         7223.131818    7.272727e+05   \n",
            "min                0.450000            0.000000    0.000000e+00   \n",
            "25%                1.887500         6225.300000    5.700000e+05   \n",
            "50%                3.200000         7850.300000    7.850000e+05   \n",
            "75%                5.625000         9025.350000    9.425000e+05   \n",
            "max                9.600000        14200.300000    1.100000e+06   \n",
            "std                2.844696         3604.982223    3.054611e+05   \n",
            "\n",
            "       Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
            "count                                    22                         22   \n",
            "unique                                  NaN                          3   \n",
            "top                                     NaN  Bankruptcy Reorganization   \n",
            "freq                                    NaN                          8   \n",
            "mean          2018-01-31 15:16:21.818181888                        NaN   \n",
            "min                     2010-04-15 00:00:00                        NaN   \n",
            "25%                     2014-10-03 06:00:00                        NaN   \n",
            "50%                     2018-01-02 12:00:00                        NaN   \n",
            "75%                     2021-10-01 06:00:00                        NaN   \n",
            "max                     2024-02-09 00:00:00                        NaN   \n",
            "std                                     NaN                        NaN   \n",
            "\n",
            "        Return on Assets (ROA)  Return on Equity (ROE)              Period  \\\n",
            "count                22.000000               22.000000                  22   \n",
            "unique                     NaN                     NaN                   1   \n",
            "top                        NaN                     NaN  Post-Restructuring   \n",
            "freq                       NaN                     NaN                  22   \n",
            "mean                  1.727273                3.877273                 NaN   \n",
            "min                  -1.100000               -2.500000                 NaN   \n",
            "25%                   1.350000                3.300000                 NaN   \n",
            "50%                   1.950000                4.500000                 NaN   \n",
            "75%                   2.650000                5.675000                 NaN   \n",
            "max                   3.100000                7.500000                 NaN   \n",
            "std                   1.266108                2.833966                 NaN   \n",
            "\n",
            "        Expected Return  Abnormal Return  \n",
            "count              22.0        22.000000  \n",
            "unique              NaN              NaN  \n",
            "top                 NaN              NaN  \n",
            "freq                NaN              NaN  \n",
            "mean                0.0         4.009091  \n",
            "min                 0.0         0.450000  \n",
            "25%                 0.0         1.887500  \n",
            "50%                 0.0         3.200000  \n",
            "75%                 0.0         5.625000  \n",
            "max                 0.0         9.600000  \n",
            "std                 0.0         2.844696  \n",
            "\n",
            "Descriptive statistics for df2 (after date conversion):\n",
            "           Year                         Company Name Stock Exchange Industry  \\\n",
            "count     22.0                                   22             22       22   \n",
            "unique     NaN                                   22              7       12   \n",
            "top        NaN  Six Flags Entertainment Corporation           NYSE   Retail   \n",
            "freq       NaN                                    1              7        5   \n",
            "mean    2024.0                                  NaN            NaN      NaN   \n",
            "min     2024.0                                  NaN            NaN      NaN   \n",
            "25%     2024.0                                  NaN            NaN      NaN   \n",
            "50%     2024.0                                  NaN            NaN      NaN   \n",
            "75%     2024.0                                  NaN            NaN      NaN   \n",
            "max     2024.0                                  NaN            NaN      NaN   \n",
            "std        0.0                                  NaN            NaN      NaN   \n",
            "\n",
            "       Country (Emerging Economy)  Closing Stock Price  \\\n",
            "count                          22            22.000000   \n",
            "unique                          2                  NaN   \n",
            "top                            No                  NaN   \n",
            "freq                           17                  NaN   \n",
            "mean                          NaN             8.509818   \n",
            "min                           NaN             0.550000   \n",
            "25%                           NaN             3.525000   \n",
            "50%                           NaN             9.258000   \n",
            "75%                           NaN             9.258000   \n",
            "max                           NaN            25.600000   \n",
            "std                           NaN             6.807480   \n",
            "\n",
            "        Market Index Value (for comparison)  Trading Volume  \\\n",
            "count                             22.000000    2.200000e+01   \n",
            "unique                                  NaN             NaN   \n",
            "top                                     NaN             NaN   \n",
            "freq                                    NaN             NaN   \n",
            "mean                           13053.333333    9.521212e+05   \n",
            "min                             1500.000000    5.000000e+05   \n",
            "25%                            11125.000000    7.000000e+05   \n",
            "50%                            13053.333333    1.006667e+06   \n",
            "75%                            13053.333333    1.006667e+06   \n",
            "max                            29000.000000    1.700000e+06   \n",
            "std                             6709.614045    3.518576e+05   \n",
            "\n",
            "       Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
            "count                                    16                         16   \n",
            "unique                                  NaN                          6   \n",
            "top                                     NaN  Bankruptcy Reorganization   \n",
            "freq                                    NaN                          4   \n",
            "mean                    2018-04-03 03:00:00                        NaN   \n",
            "min                     2009-06-01 00:00:00                        NaN   \n",
            "25%                     2012-01-06 06:00:00                        NaN   \n",
            "50%                     2021-04-26 12:00:00                        NaN   \n",
            "75%                     2022-05-22 06:00:00                        NaN   \n",
            "max                     2023-08-30 00:00:00                        NaN   \n",
            "std                                     NaN                        NaN   \n",
            "\n",
            "        Return on Assets (ROA)  Return on Equity (ROE)              Period  \\\n",
            "count                22.000000               22.000000                  22   \n",
            "unique                     NaN                     NaN                   1   \n",
            "top                        NaN                     NaN  Post-Restructuring   \n",
            "freq                       NaN                     NaN                  22   \n",
            "mean                 -0.442424               -0.382121                 NaN   \n",
            "min                  -4.700000              -10.500000                 NaN   \n",
            "25%                  -1.125000               -2.975000                 NaN   \n",
            "50%                  -0.433333               -0.386667                 NaN   \n",
            "75%                   0.725000                2.400000                 NaN   \n",
            "max                   3.400000               10.800000                 NaN   \n",
            "std                   2.141853                5.925105                 NaN   \n",
            "\n",
            "        Expected Return  Abnormal Return  \n",
            "count              22.0        22.000000  \n",
            "unique              NaN              NaN  \n",
            "top                 NaN              NaN  \n",
            "freq                NaN              NaN  \n",
            "mean                0.0         8.509818  \n",
            "min                 0.0         0.550000  \n",
            "25%                 0.0         3.525000  \n",
            "50%                 0.0         9.258000  \n",
            "75%                 0.0         9.258000  \n",
            "max                 0.0        25.600000  \n",
            "std                 0.0         6.807480  \n",
            "\n",
            "Time Period Analysis (df1 - after conversion):\n",
            "2010-04-15 00:00:00\n",
            "2024-02-09 00:00:00\n",
            "\n",
            "Time Period Analysis (df2 - after conversion):\n",
            "2009-06-01 00:00:00\n",
            "2023-08-30 00:00:00\n",
            "\n",
            "Correlation Matrix (df1):\n",
            "                         Closing Stock Price  Return on Assets (ROA)  \\\n",
            "Closing Stock Price                1.000000                0.474771   \n",
            "Return on Assets (ROA)             0.474771                1.000000   \n",
            "Return on Equity (ROE)             0.438191                0.959700   \n",
            "Trading Volume                     0.614679                0.711384   \n",
            "\n",
            "                        Return on Equity (ROE)  Trading Volume  \n",
            "Closing Stock Price                   0.438191        0.614679  \n",
            "Return on Assets (ROA)                0.959700        0.711384  \n",
            "Return on Equity (ROE)                1.000000        0.658707  \n",
            "Trading Volume                        0.658707        1.000000  \n",
            "\n",
            "Correlation Matrix (df2):\n",
            "                         Closing Stock Price  Return on Assets (ROA)  \\\n",
            "Closing Stock Price                1.000000                0.698939   \n",
            "Return on Assets (ROA)             0.698939                1.000000   \n",
            "Return on Equity (ROE)             0.750528                0.986600   \n",
            "Trading Volume                    -0.325251               -0.571600   \n",
            "\n",
            "                        Return on Equity (ROE)  Trading Volume  \n",
            "Closing Stock Price                   0.750528       -0.325251  \n",
            "Return on Assets (ROA)                0.986600       -0.571600  \n",
            "Return on Equity (ROE)                1.000000       -0.507771  \n",
            "Trading Volume                       -0.507771        1.000000  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:4968: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n",
            "  arr.partition(\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block encountered an error because of the data type of the 'Debt Restructuring Announcement Date' column. I need to convert this column to datetime objects in both dataframes to perform time-based analysis correctly. I will also re-run the descriptive statistics and correlation analysis after converting the date column.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "zwwlj_1s4ls4"
      }
    },
    {
      "source": [
        "# Convert 'Debt Restructuring Announcement Date' to datetime\n",
        "df1['Debt Restructuring Announcement Date'] = pd.to_datetime(df1['Debt Restructuring Announcement Date'], format='%d/%m/%Y', errors='coerce')\n",
        "df2['Debt Restructuring Announcement Date'] = pd.to_datetime(df2['Debt Restructuring Announcement Date'], format='%d/%m/%Y', errors='coerce')\n",
        "\n",
        "# Re-calculate descriptive statistics after date conversion\n",
        "print(\"\\nDescriptive statistics for df1 (after date conversion):\\n\", df1.describe(include='all'))\n",
        "print(\"\\nDescriptive statistics for df2 (after date conversion):\\n\", df2.describe(include='all'))\n",
        "\n",
        "# Re-run Time Period Analysis\n",
        "print(\"\\nTime Period Analysis (df1 - after conversion):\")\n",
        "print(df1['Debt Restructuring Announcement Date'].min())\n",
        "print(df1['Debt Restructuring Announcement Date'].max())\n",
        "print(\"\\nTime Period Analysis (df2 - after conversion):\")\n",
        "print(df2['Debt Restructuring Announcement Date'].min())\n",
        "print(df2['Debt Restructuring Announcement Date'].max())\n",
        "\n",
        "# Correlation analysis (after date conversion - no change needed here)\n",
        "print(\"\\nCorrelation Matrix (df1):\\n\", df1[['Closing Stock Price', 'Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']].corr())\n",
        "print(\"\\nCorrelation Matrix (df2):\\n\", df2[['Closing Stock Price', 'Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']].corr())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN8hGtt24l8l",
        "outputId": "d5b34d0e-8b3d-4df4-a1d7-0503d5d9e213"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Descriptive statistics for df1 (after date conversion):\n",
            "                Year Company Name Stock Exchange Industry Country  \\\n",
            "count     22.000000           22             22       22      22   \n",
            "unique          NaN           22              7       12       6   \n",
            "top             NaN   RadioShack           NYSE   Retail     USA   \n",
            "freq            NaN            1             12        5      14   \n",
            "mean    2017.500000          NaN            NaN      NaN     NaN   \n",
            "min     2010.000000          NaN            NaN      NaN     NaN   \n",
            "25%     2014.250000          NaN            NaN      NaN     NaN   \n",
            "50%     2017.500000          NaN            NaN      NaN     NaN   \n",
            "75%     2021.000000          NaN            NaN      NaN     NaN   \n",
            "max     2024.000000          NaN            NaN      NaN     NaN   \n",
            "std        4.228588          NaN            NaN      NaN     NaN   \n",
            "\n",
            "        Closing Stock Price  Market Index Value  Trading Volume  \\\n",
            "count             22.000000           22.000000    2.200000e+01   \n",
            "unique                  NaN                 NaN             NaN   \n",
            "top                     NaN                 NaN             NaN   \n",
            "freq                    NaN                 NaN             NaN   \n",
            "mean               4.111364         7223.131818    7.409091e+05   \n",
            "min                0.000000            0.000000    0.000000e+00   \n",
            "25%                1.887500         6225.300000    5.700000e+05   \n",
            "50%                3.200000         7850.300000    7.850000e+05   \n",
            "75%                5.625000         9025.350000    9.425000e+05   \n",
            "max               12.300000        14200.300000    1.400000e+06   \n",
            "std                3.166752         3604.982223    3.287047e+05   \n",
            "\n",
            "       Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
            "count                                    22                         22   \n",
            "unique                                  NaN                          3   \n",
            "top                                     NaN  Bankruptcy Reorganization   \n",
            "freq                                    NaN                          8   \n",
            "mean          2018-01-31 15:16:21.818181888                        NaN   \n",
            "min                     2010-04-15 00:00:00                        NaN   \n",
            "25%                     2014-10-03 06:00:00                        NaN   \n",
            "50%                     2018-01-02 12:00:00                        NaN   \n",
            "75%                     2021-10-01 06:00:00                        NaN   \n",
            "max                     2024-02-09 00:00:00                        NaN   \n",
            "std                                     NaN                        NaN   \n",
            "\n",
            "        Return on Assets (ROA)  Return on Equity (ROE)  \n",
            "count                22.000000               22.000000  \n",
            "unique                     NaN                     NaN  \n",
            "top                        NaN                     NaN  \n",
            "freq                       NaN                     NaN  \n",
            "mean                  1.727273                3.900000  \n",
            "min                  -1.500000               -3.000000  \n",
            "25%                   1.350000                3.300000  \n",
            "50%                   1.950000                4.500000  \n",
            "75%                   2.650000                5.675000  \n",
            "max                   3.500000                8.500000  \n",
            "std                   1.333517                2.956188  \n",
            "\n",
            "Descriptive statistics for df2 (after date conversion):\n",
            "           Year                         Company Name Stock Exchange Industry  \\\n",
            "count     22.0                                   22             22       22   \n",
            "unique     NaN                                   22              7       12   \n",
            "top        NaN  Six Flags Entertainment Corporation           NYSE   Retail   \n",
            "freq       NaN                                    1              7        5   \n",
            "mean    2024.0                                  NaN            NaN      NaN   \n",
            "min     2024.0                                  NaN            NaN      NaN   \n",
            "25%     2024.0                                  NaN            NaN      NaN   \n",
            "50%     2024.0                                  NaN            NaN      NaN   \n",
            "75%     2024.0                                  NaN            NaN      NaN   \n",
            "max     2024.0                                  NaN            NaN      NaN   \n",
            "std        0.0                                  NaN            NaN      NaN   \n",
            "\n",
            "       Country (Emerging Economy)  Closing Stock Price  \\\n",
            "count                          22            15.000000   \n",
            "unique                          2                  NaN   \n",
            "top                            No                  NaN   \n",
            "freq                           17                  NaN   \n",
            "mean                          NaN             9.258000   \n",
            "min                           NaN             0.310000   \n",
            "25%                           NaN             1.260000   \n",
            "50%                           NaN             6.900000   \n",
            "75%                           NaN             9.900000   \n",
            "max                           NaN            42.300000   \n",
            "std                           NaN            11.384333   \n",
            "\n",
            "        Market Index Value (for comparison)  Trading Volume  \\\n",
            "count                             15.000000    1.500000e+01   \n",
            "unique                                  NaN             NaN   \n",
            "top                                     NaN             NaN   \n",
            "freq                                    NaN             NaN   \n",
            "mean                           13053.333333    1.006667e+06   \n",
            "min                             1500.000000    4.000000e+05   \n",
            "25%                             9000.000000    6.000000e+05   \n",
            "50%                            11800.000000    8.000000e+05   \n",
            "75%                            14500.000000    1.200000e+06   \n",
            "max                            29000.000000    3.000000e+06   \n",
            "std                             8217.565391    6.691857e+05   \n",
            "\n",
            "       Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
            "count                                    16                         16   \n",
            "unique                                  NaN                          6   \n",
            "top                                     NaN  Bankruptcy Reorganization   \n",
            "freq                                    NaN                          4   \n",
            "mean                    2018-04-03 03:00:00                        NaN   \n",
            "min                     2009-06-01 00:00:00                        NaN   \n",
            "25%                     2012-01-06 06:00:00                        NaN   \n",
            "50%                     2021-04-26 12:00:00                        NaN   \n",
            "75%                     2022-05-22 06:00:00                        NaN   \n",
            "max                     2023-08-30 00:00:00                        NaN   \n",
            "std                                     NaN                        NaN   \n",
            "\n",
            "        Return on Assets (ROA)  Return on Equity (ROE)  \n",
            "count                15.000000               15.000000  \n",
            "unique                     NaN                     NaN  \n",
            "top                        NaN                     NaN  \n",
            "freq                       NaN                     NaN  \n",
            "mean                 -0.433333               -0.386667  \n",
            "min                  -5.300000              -12.100000  \n",
            "25%                  -1.800000               -5.500000  \n",
            "50%                  -0.500000               -1.700000  \n",
            "75%                   1.250000                4.400000  \n",
            "max                   4.200000               12.300000  \n",
            "std                   2.785079                7.596885  \n",
            "\n",
            "Time Period Analysis (df1 - after conversion):\n",
            "2010-04-15 00:00:00\n",
            "2024-02-09 00:00:00\n",
            "\n",
            "Time Period Analysis (df2 - after conversion):\n",
            "2009-06-01 00:00:00\n",
            "2023-08-30 00:00:00\n",
            "\n",
            "Correlation Matrix (df1):\n",
            "                         Closing Stock Price  Return on Assets (ROA)  \\\n",
            "Closing Stock Price                1.000000                0.478265   \n",
            "Return on Assets (ROA)             0.478265                1.000000   \n",
            "Return on Equity (ROE)             0.491755                0.951142   \n",
            "Trading Volume                     0.613500                0.686307   \n",
            "\n",
            "                        Return on Equity (ROE)  Trading Volume  \n",
            "Closing Stock Price                   0.491755        0.613500  \n",
            "Return on Assets (ROA)                0.951142        0.686307  \n",
            "Return on Equity (ROE)                1.000000        0.625846  \n",
            "Trading Volume                        0.625846        1.000000  \n",
            "\n",
            "Correlation Matrix (df2):\n",
            "                         Closing Stock Price  Return on Assets (ROA)  \\\n",
            "Closing Stock Price                1.000000                0.640078   \n",
            "Return on Assets (ROA)             0.640078                1.000000   \n",
            "Return on Equity (ROE)             0.734040                0.984051   \n",
            "Trading Volume                    -0.226494               -0.603882   \n",
            "\n",
            "                        Return on Equity (ROE)  Trading Volume  \n",
            "Closing Stock Price                   0.734040       -0.226494  \n",
            "Return on Assets (ROA)                0.984051       -0.603882  \n",
            "Return on Equity (ROE)                1.000000       -0.533935  \n",
            "Trading Volume                       -0.533935        1.000000  \n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data preparation\n",
        "\n",
        "### Subtask:\n",
        "Prepare the data for analysis by handling missing values, outliers, and ensuring data consistency across both dataframes.  Merge the dataframes if a suitable common key exists.  Identify pre and post restructuring periods.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "QW1gzK-44q5J"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Handle missing values in df2, address outliers in both dataframes, ensure data consistency, and define pre/post-restructuring periods.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "_6jbI8904r-C"
      }
    },
    {
      "source": [
        "# Impute missing values in df2 using the mean for numerical columns\n",
        "numerical_cols_df2 = ['Closing Stock Price', 'Market Index Value (for comparison)', 'Trading Volume', 'Return on Assets (ROA)', 'Return on Equity (ROE)']\n",
        "for col in numerical_cols_df2:\n",
        "    if col in df2.columns:  # Check if the column exists in df2 before imputing\n",
        "        df2[col] = df2[col].fillna(df2[col].mean())\n",
        "\n",
        "# Identify common numerical columns for winsorization\n",
        "common_numerical_cols = list(set(numerical_cols_df2) & set(df1.columns))  # Find columns present in both dataframes\n",
        "\n",
        "# Winsorize outliers in both dataframes for common columns\n",
        "from scipy.stats.mstats import winsorize\n",
        "\n",
        "for col in common_numerical_cols:\n",
        "    df1[col] = winsorize(df1[col], limits=[0.05, 0.05])  # Winsorize top and bottom 5%\n",
        "    df2[col] = winsorize(df2[col], limits=[0.05, 0.05])\n",
        "\n",
        "# Ensure consistent data types\n",
        "df1['Year'] = df1['Year'].astype(int)\n",
        "df2['Year'] = df2['Year'].astype(int)\n",
        "\n",
        "# Define pre/post-restructuring periods\n",
        "def categorize_period(row):\n",
        "    if row['Year'] < row['Debt Restructuring Announcement Date'].year:\n",
        "        return 'Pre-Restructuring'\n",
        "    else:\n",
        "        return 'Post-Restructuring'\n",
        "\n",
        "df1['Period'] = df1.apply(categorize_period, axis=1)\n",
        "df2['Period'] = df2.apply(categorize_period, axis=1)\n",
        "\n",
        "display(df1.head())\n",
        "display(df2.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 762
        },
        "id": "aPYnmebp4sN0",
        "outputId": "ca3e7f47-8de5-49ec-8784-025238f2d4c6"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                          Company Name Stock Exchange      Industry  \\\n",
              "0  2011                            RadioShack           NYSE        Retail   \n",
              "1  2013  Puerto Rico Electric Power Authority           NYSE        Energy   \n",
              "2  2015                           Toys 'R' Us           NYSE        Retail   \n",
              "3  2017                Essar Steel India Ltd.            BSE         Steel   \n",
              "4  2019                            Interserve            LSE  Construction   \n",
              "\n",
              "  Country  Closing Stock Price  Market Index Value  Trading Volume  \\\n",
              "0     USA                 2.15             2800.55          500000   \n",
              "1     USA                 5.80             7600.45          850000   \n",
              "2     USA                 0.45                0.00               0   \n",
              "3   India                 9.60            14200.30          920000   \n",
              "4      UK                 1.75             3500.60          470000   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           2011-09-05                Refinancing   \n",
              "1                           2013-07-18       Debt-for-Equity Swap   \n",
              "2                           2015-11-22  Bankruptcy Reorganization   \n",
              "3                           2017-06-30                Refinancing   \n",
              "4                           2019-12-10       Debt-for-Equity Swap   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)              Period  \\\n",
              "0                     1.2                     4.5  Post-Restructuring   \n",
              "1                     2.5                     5.9  Post-Restructuring   \n",
              "2                    -0.8                    -2.1  Post-Restructuring   \n",
              "3                     3.1                     7.5  Post-Restructuring   \n",
              "4                     1.9                     3.2  Post-Restructuring   \n",
              "\n",
              "   Expected Return  Abnormal Return  \n",
              "0                0             2.15  \n",
              "1                0             5.80  \n",
              "2                0             0.45  \n",
              "3                0             9.60  \n",
              "4                0             1.75  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24d71418-98cc-49f0-b31f-0f02050a631c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "      <th>Period</th>\n",
              "      <th>Expected Return</th>\n",
              "      <th>Abnormal Return</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011</td>\n",
              "      <td>RadioShack</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2800.55</td>\n",
              "      <td>500000</td>\n",
              "      <td>2011-09-05</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>1.2</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>2.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013</td>\n",
              "      <td>Puerto Rico Electric Power Authority</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Energy</td>\n",
              "      <td>USA</td>\n",
              "      <td>5.80</td>\n",
              "      <td>7600.45</td>\n",
              "      <td>850000</td>\n",
              "      <td>2013-07-18</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.9</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>5.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015</td>\n",
              "      <td>Toys 'R' Us</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>0.45</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>2015-11-22</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>-0.8</td>\n",
              "      <td>-2.1</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017</td>\n",
              "      <td>Essar Steel India Ltd.</td>\n",
              "      <td>BSE</td>\n",
              "      <td>Steel</td>\n",
              "      <td>India</td>\n",
              "      <td>9.60</td>\n",
              "      <td>14200.30</td>\n",
              "      <td>920000</td>\n",
              "      <td>2017-06-30</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>3.1</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>9.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019</td>\n",
              "      <td>Interserve</td>\n",
              "      <td>LSE</td>\n",
              "      <td>Construction</td>\n",
              "      <td>UK</td>\n",
              "      <td>1.75</td>\n",
              "      <td>3500.60</td>\n",
              "      <td>470000</td>\n",
              "      <td>2019-12-10</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>1.9</td>\n",
              "      <td>3.2</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24d71418-98cc-49f0-b31f-0f02050a631c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24d71418-98cc-49f0-b31f-0f02050a631c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24d71418-98cc-49f0-b31f-0f02050a631c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b3c2560-018c-493a-98db-21ff685e6a03\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b3c2560-018c-493a-98db-21ff685e6a03')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b3c2560-018c-493a-98db-21ff685e6a03 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2013,\n          2019,\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Puerto Rico Electric Power Authority\",\n          \"Interserve\",\n          \"Toys 'R' Us\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\",\n          \"BSE\",\n          \"LSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Energy\",\n          \"Construction\",\n          \"Retail\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"USA\",\n          \"India\",\n          \"UK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.730784099891067,\n        \"min\": 0.45,\n        \"max\": 9.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.8,\n          1.75,\n          0.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5512.923095622684,\n        \"min\": 0.0,\n        \"max\": 14200.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7600.45,\n          3500.6,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366837,\n        \"min\": 0,\n        \"max\": 920000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          850000,\n          470000,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-09-05 00:00:00\",\n        \"max\": \"2019-12-10 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2013-07-18 00:00:00\",\n          \"2019-12-10 00:00:00\",\n          \"2015-11-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Refinancing\",\n          \"Debt-for-Equity Swap\",\n          \"Bankruptcy Reorganization\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5056560032092323,\n        \"min\": -0.8,\n        \"max\": 3.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5,\n          1.9,\n          -0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.6660605559646724,\n        \"min\": -2.1,\n        \"max\": 7.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.9,\n          3.2,\n          -2.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Expected Return\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abnormal Return\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.730784099891067,\n        \"min\": 0.45,\n        \"max\": 9.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                         Company Name Stock Exchange       Industry  \\\n",
              "0  2024  Six Flags Entertainment Corporation           NYSE  Entertainment   \n",
              "1  2024                       General Motors           NYSE     Automobile   \n",
              "2  2024                       Chrysler Group     Not Listed     Automobile   \n",
              "3  2024                    American Airlines         NASDAQ       Airlines   \n",
              "4  2024                Eastman Kodak Company           NYSE    Photography   \n",
              "\n",
              "  Country (Emerging Economy)  Closing Stock Price  \\\n",
              "0                         No               25.600   \n",
              "1                         No               25.600   \n",
              "2                         No                9.258   \n",
              "3                         No               15.200   \n",
              "4                         No                4.800   \n",
              "\n",
              "   Market Index Value (for comparison)  Trading Volume  \\\n",
              "0                          4500.000000    5.000000e+05   \n",
              "1                          3500.000000    1.200000e+06   \n",
              "2                         13053.333333    1.006667e+06   \n",
              "3                         15000.000000    8.000000e+05   \n",
              "4                         11000.000000    6.000000e+05   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           2020-04-15  Bankruptcy Reorganization   \n",
              "1                           2009-06-01         Government Bailout   \n",
              "2                                  NaT                        NaN   \n",
              "3                           2011-11-29  Bankruptcy Reorganization   \n",
              "4                           2012-01-19  Bankruptcy Reorganization   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)              Period  \\\n",
              "0                1.200000                5.400000  Post-Restructuring   \n",
              "1                3.400000               10.800000  Post-Restructuring   \n",
              "2               -0.433333               -0.386667  Post-Restructuring   \n",
              "3                2.100000                7.800000  Post-Restructuring   \n",
              "4                0.800000                2.500000  Post-Restructuring   \n",
              "\n",
              "   Expected Return  Abnormal Return  \n",
              "0                0           25.600  \n",
              "1                0           25.600  \n",
              "2                0            9.258  \n",
              "3                0           15.200  \n",
              "4                0            4.800  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d904ab0-e9a2-4948-afe1-077926c4c0f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country (Emerging Economy)</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value (for comparison)</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "      <th>Period</th>\n",
              "      <th>Expected Return</th>\n",
              "      <th>Abnormal Return</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024</td>\n",
              "      <td>Six Flags Entertainment Corporation</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>No</td>\n",
              "      <td>25.600</td>\n",
              "      <td>4500.000000</td>\n",
              "      <td>5.000000e+05</td>\n",
              "      <td>2020-04-15</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>5.400000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>25.600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024</td>\n",
              "      <td>General Motors</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>25.600</td>\n",
              "      <td>3500.000000</td>\n",
              "      <td>1.200000e+06</td>\n",
              "      <td>2009-06-01</td>\n",
              "      <td>Government Bailout</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>10.800000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>25.600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024</td>\n",
              "      <td>Chrysler Group</td>\n",
              "      <td>Not Listed</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>9.258</td>\n",
              "      <td>13053.333333</td>\n",
              "      <td>1.006667e+06</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.433333</td>\n",
              "      <td>-0.386667</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>9.258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024</td>\n",
              "      <td>American Airlines</td>\n",
              "      <td>NASDAQ</td>\n",
              "      <td>Airlines</td>\n",
              "      <td>No</td>\n",
              "      <td>15.200</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>8.000000e+05</td>\n",
              "      <td>2011-11-29</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>2.100000</td>\n",
              "      <td>7.800000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>15.200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024</td>\n",
              "      <td>Eastman Kodak Company</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Photography</td>\n",
              "      <td>No</td>\n",
              "      <td>4.800</td>\n",
              "      <td>11000.000000</td>\n",
              "      <td>6.000000e+05</td>\n",
              "      <td>2012-01-19</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "      <td>0</td>\n",
              "      <td>4.800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d904ab0-e9a2-4948-afe1-077926c4c0f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8d904ab0-e9a2-4948-afe1-077926c4c0f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8d904ab0-e9a2-4948-afe1-077926c4c0f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a4b3bda-c4c9-4d5f-97d7-5d5f354a2ec0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a4b3bda-c4c9-4d5f-97d7-5d5f354a2ec0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a4b3bda-c4c9-4d5f-97d7-5d5f354a2ec0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2024,\n        \"max\": 2024,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"General Motors\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Automobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country (Emerging Economy)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.431497908603914,\n        \"min\": 4.8,\n        \"max\": 25.6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value (for comparison)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5149.909600069587,\n        \"min\": 3500.0,\n        \"max\": 15000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 287417.621047995,\n        \"min\": 500000.0,\n        \"max\": 1200000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1200000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2009-06-01 00:00:00\",\n        \"max\": \"2020-04-15 00:00:00\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"2009-06-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Government Bailout\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.436160003466033,\n        \"min\": -0.4333333333333333,\n        \"max\": 3.4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.377735589193217,\n        \"min\": -0.3866666666666665,\n        \"max\": 10.8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          10.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Expected Return\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abnormal Return\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.431497908603914,\n        \"min\": 4.8,\n        \"max\": 25.6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code failed due to a KeyError, likely because 'Market Index Value (for comparison)' is not a column in `df1`.  I will correct the code to only apply the operations to columns present in both dataframes. I will also handle the missing values in `df2` before winsorizing.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "5_YQ9igF4uF3"
      }
    },
    {
      "source": [
        "# Impute missing values in df2 using the mean for numerical columns\n",
        "numerical_cols_df2 = ['Closing Stock Price', 'Market Index Value (for comparison)', 'Trading Volume', 'Return on Assets (ROA)', 'Return on Equity (ROE)']\n",
        "for col in numerical_cols_df2:\n",
        "    df2[col] = df2[col].fillna(df2[col].mean())\n",
        "\n",
        "# Identify columns present in both dataframes\n",
        "common_numerical_cols = list(set(numerical_cols_df2) & set(df1.columns))\n",
        "\n",
        "# Winsorize outliers in both dataframes for common columns\n",
        "from scipy.stats.mstats import winsorize\n",
        "\n",
        "for col in common_numerical_cols:\n",
        "    df1[col] = winsorize(df1[col], limits=[0.05, 0.05])  # Winsorize top and bottom 5%\n",
        "    df2[col] = winsorize(df2[col], limits=[0.05, 0.05])\n",
        "\n",
        "# Ensure consistent data types\n",
        "df1['Year'] = df1['Year'].astype(int)\n",
        "df2['Year'] = df2['Year'].astype(int)\n",
        "\n",
        "\n",
        "# Define pre/post-restructuring periods\n",
        "def categorize_period(row):\n",
        "    if row['Year'] < row['Debt Restructuring Announcement Date'].year:\n",
        "        return 'Pre-Restructuring'\n",
        "    else:\n",
        "        return 'Post-Restructuring'\n",
        "\n",
        "df1['Period'] = df1.apply(categorize_period, axis=1)\n",
        "df2['Period'] = df2.apply(categorize_period, axis=1)\n",
        "\n",
        "display(df1.head())\n",
        "display(df2.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 762
        },
        "id": "aGJpy3Dr4uVz",
        "outputId": "d81b523a-e9c2-4861-fad0-092f34b3284b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                          Company Name Stock Exchange      Industry  \\\n",
              "0  2011                            RadioShack           NYSE        Retail   \n",
              "1  2013  Puerto Rico Electric Power Authority           NYSE        Energy   \n",
              "2  2015                           Toys 'R' Us           NYSE        Retail   \n",
              "3  2017                Essar Steel India Ltd.            BSE         Steel   \n",
              "4  2019                            Interserve            LSE  Construction   \n",
              "\n",
              "  Country  Closing Stock Price  Market Index Value  Trading Volume  \\\n",
              "0     USA                 2.15             2800.55          500000   \n",
              "1     USA                 5.80             7600.45          850000   \n",
              "2     USA                 0.45                0.00               0   \n",
              "3   India                 9.60            14200.30          920000   \n",
              "4      UK                 1.75             3500.60          470000   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           2011-09-05                Refinancing   \n",
              "1                           2013-07-18       Debt-for-Equity Swap   \n",
              "2                           2015-11-22  Bankruptcy Reorganization   \n",
              "3                           2017-06-30                Refinancing   \n",
              "4                           2019-12-10       Debt-for-Equity Swap   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)              Period  \n",
              "0                     1.2                     4.5  Post-Restructuring  \n",
              "1                     2.5                     5.9  Post-Restructuring  \n",
              "2                    -0.8                    -2.1  Post-Restructuring  \n",
              "3                     3.1                     7.5  Post-Restructuring  \n",
              "4                     1.9                     3.2  Post-Restructuring  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8e8a4ff-962c-4799-864b-44d6d45ab0a9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "      <th>Period</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011</td>\n",
              "      <td>RadioShack</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>2.15</td>\n",
              "      <td>2800.55</td>\n",
              "      <td>500000</td>\n",
              "      <td>2011-09-05</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>1.2</td>\n",
              "      <td>4.5</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2013</td>\n",
              "      <td>Puerto Rico Electric Power Authority</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Energy</td>\n",
              "      <td>USA</td>\n",
              "      <td>5.80</td>\n",
              "      <td>7600.45</td>\n",
              "      <td>850000</td>\n",
              "      <td>2013-07-18</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.9</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015</td>\n",
              "      <td>Toys 'R' Us</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Retail</td>\n",
              "      <td>USA</td>\n",
              "      <td>0.45</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>2015-11-22</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>-0.8</td>\n",
              "      <td>-2.1</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017</td>\n",
              "      <td>Essar Steel India Ltd.</td>\n",
              "      <td>BSE</td>\n",
              "      <td>Steel</td>\n",
              "      <td>India</td>\n",
              "      <td>9.60</td>\n",
              "      <td>14200.30</td>\n",
              "      <td>920000</td>\n",
              "      <td>2017-06-30</td>\n",
              "      <td>Refinancing</td>\n",
              "      <td>3.1</td>\n",
              "      <td>7.5</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019</td>\n",
              "      <td>Interserve</td>\n",
              "      <td>LSE</td>\n",
              "      <td>Construction</td>\n",
              "      <td>UK</td>\n",
              "      <td>1.75</td>\n",
              "      <td>3500.60</td>\n",
              "      <td>470000</td>\n",
              "      <td>2019-12-10</td>\n",
              "      <td>Debt-for-Equity Swap</td>\n",
              "      <td>1.9</td>\n",
              "      <td>3.2</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8e8a4ff-962c-4799-864b-44d6d45ab0a9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e8e8a4ff-962c-4799-864b-44d6d45ab0a9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e8e8a4ff-962c-4799-864b-44d6d45ab0a9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-36dc7537-5fac-402a-8ee0-de757c417e9b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36dc7537-5fac-402a-8ee0-de757c417e9b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-36dc7537-5fac-402a-8ee0-de757c417e9b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2013,\n          2019,\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Puerto Rico Electric Power Authority\",\n          \"Interserve\",\n          \"Toys 'R' Us\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\",\n          \"BSE\",\n          \"LSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Energy\",\n          \"Construction\",\n          \"Retail\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"USA\",\n          \"India\",\n          \"UK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.730784099891067,\n        \"min\": 0.45,\n        \"max\": 9.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.8,\n          1.75,\n          0.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5512.923095622684,\n        \"min\": 0.0,\n        \"max\": 14200.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7600.45,\n          3500.6,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 366837,\n        \"min\": 0,\n        \"max\": 920000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          850000,\n          470000,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-09-05 00:00:00\",\n        \"max\": \"2019-12-10 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2013-07-18 00:00:00\",\n          \"2019-12-10 00:00:00\",\n          \"2015-11-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Refinancing\",\n          \"Debt-for-Equity Swap\",\n          \"Bankruptcy Reorganization\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5056560032092323,\n        \"min\": -0.8,\n        \"max\": 3.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5,\n          1.9,\n          -0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.6660605559646724,\n        \"min\": -2.1,\n        \"max\": 7.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.9,\n          3.2,\n          -2.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Year                         Company Name Stock Exchange       Industry  \\\n",
              "0  2024  Six Flags Entertainment Corporation           NYSE  Entertainment   \n",
              "1  2024                       General Motors           NYSE     Automobile   \n",
              "2  2024                       Chrysler Group     Not Listed     Automobile   \n",
              "3  2024                    American Airlines         NASDAQ       Airlines   \n",
              "4  2024                Eastman Kodak Company           NYSE    Photography   \n",
              "\n",
              "  Country (Emerging Economy)  Closing Stock Price  \\\n",
              "0                         No               25.600   \n",
              "1                         No               25.600   \n",
              "2                         No                9.258   \n",
              "3                         No               15.200   \n",
              "4                         No                4.800   \n",
              "\n",
              "   Market Index Value (for comparison)  Trading Volume  \\\n",
              "0                          4500.000000    5.000000e+05   \n",
              "1                          3500.000000    1.200000e+06   \n",
              "2                         13053.333333    1.006667e+06   \n",
              "3                         15000.000000    8.000000e+05   \n",
              "4                         11000.000000    6.000000e+05   \n",
              "\n",
              "  Debt Restructuring Announcement Date Type of Debt Restructuring  \\\n",
              "0                           2020-04-15  Bankruptcy Reorganization   \n",
              "1                           2009-06-01         Government Bailout   \n",
              "2                                  NaT                        NaN   \n",
              "3                           2011-11-29  Bankruptcy Reorganization   \n",
              "4                           2012-01-19  Bankruptcy Reorganization   \n",
              "\n",
              "   Return on Assets (ROA)  Return on Equity (ROE)              Period  \n",
              "0                1.200000                5.400000  Post-Restructuring  \n",
              "1                3.400000               10.800000  Post-Restructuring  \n",
              "2               -0.433333               -0.386667  Post-Restructuring  \n",
              "3                2.100000                7.800000  Post-Restructuring  \n",
              "4                0.800000                2.500000  Post-Restructuring  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3d891d6-2280-4903-8575-01530cceed3f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Company Name</th>\n",
              "      <th>Stock Exchange</th>\n",
              "      <th>Industry</th>\n",
              "      <th>Country (Emerging Economy)</th>\n",
              "      <th>Closing Stock Price</th>\n",
              "      <th>Market Index Value (for comparison)</th>\n",
              "      <th>Trading Volume</th>\n",
              "      <th>Debt Restructuring Announcement Date</th>\n",
              "      <th>Type of Debt Restructuring</th>\n",
              "      <th>Return on Assets (ROA)</th>\n",
              "      <th>Return on Equity (ROE)</th>\n",
              "      <th>Period</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024</td>\n",
              "      <td>Six Flags Entertainment Corporation</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>No</td>\n",
              "      <td>25.600</td>\n",
              "      <td>4500.000000</td>\n",
              "      <td>5.000000e+05</td>\n",
              "      <td>2020-04-15</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>5.400000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024</td>\n",
              "      <td>General Motors</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>25.600</td>\n",
              "      <td>3500.000000</td>\n",
              "      <td>1.200000e+06</td>\n",
              "      <td>2009-06-01</td>\n",
              "      <td>Government Bailout</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>10.800000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024</td>\n",
              "      <td>Chrysler Group</td>\n",
              "      <td>Not Listed</td>\n",
              "      <td>Automobile</td>\n",
              "      <td>No</td>\n",
              "      <td>9.258</td>\n",
              "      <td>13053.333333</td>\n",
              "      <td>1.006667e+06</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.433333</td>\n",
              "      <td>-0.386667</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024</td>\n",
              "      <td>American Airlines</td>\n",
              "      <td>NASDAQ</td>\n",
              "      <td>Airlines</td>\n",
              "      <td>No</td>\n",
              "      <td>15.200</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>8.000000e+05</td>\n",
              "      <td>2011-11-29</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>2.100000</td>\n",
              "      <td>7.800000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024</td>\n",
              "      <td>Eastman Kodak Company</td>\n",
              "      <td>NYSE</td>\n",
              "      <td>Photography</td>\n",
              "      <td>No</td>\n",
              "      <td>4.800</td>\n",
              "      <td>11000.000000</td>\n",
              "      <td>6.000000e+05</td>\n",
              "      <td>2012-01-19</td>\n",
              "      <td>Bankruptcy Reorganization</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>Post-Restructuring</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3d891d6-2280-4903-8575-01530cceed3f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a3d891d6-2280-4903-8575-01530cceed3f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a3d891d6-2280-4903-8575-01530cceed3f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5bf5cfe8-d294-438d-99b3-fc6a9adc7439\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bf5cfe8-d294-438d-99b3-fc6a9adc7439')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5bf5cfe8-d294-438d-99b3-fc6a9adc7439 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2024,\n        \"max\": 2024,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"General Motors\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Exchange\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NYSE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Industry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Automobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country (Emerging Economy)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Closing Stock Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.431497908603914,\n        \"min\": 4.8,\n        \"max\": 25.6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9.258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market Index Value (for comparison)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5149.909600069587,\n        \"min\": 3500.0,\n        \"max\": 15000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trading Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 287417.621047995,\n        \"min\": 500000.0,\n        \"max\": 1200000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1200000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Debt Restructuring Announcement Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2009-06-01 00:00:00\",\n        \"max\": \"2020-04-15 00:00:00\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"2009-06-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type of Debt Restructuring\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Government Bailout\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Assets (ROA)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.436160003466033,\n        \"min\": -0.4333333333333333,\n        \"max\": 3.4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Return on Equity (ROE)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.377735589193217,\n        \"min\": -0.3866666666666665,\n        \"max\": 10.8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          10.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data analysis\n",
        "\n",
        "### Subtask:\n",
        "Perform descriptive and inferential statistical analysis on the prepared datasets.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "bPOZuQuI4zO7"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Calculate descriptive statistics for stock prices in the pre and post-restructuring periods for both dataframes. Then compute abnormal returns using a placeholder market model (since actual market data is not available). After that, conduct paired t-tests to compare the mean stock price changes before and after restructuring. Finally, perform multiple regression analysis to assess the impact of firm-specific factors on stock price reactions.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "vu378IvD40rf"
      }
    },
    {
      "source": [
        "import numpy as np\n",
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# 1. Descriptive Statistics\n",
        "print(\"Descriptive Statistics for df1:\")\n",
        "print(df1.groupby('Period')['Closing Stock Price'].describe())\n",
        "print(\"\\nDescriptive Statistics for df2:\")\n",
        "print(df2.groupby('Period')['Closing Stock Price'].describe())\n",
        "\n",
        "# 2. Abnormal Returns (using a placeholder Market Model)\n",
        "# In a real-world scenario, replace this with the actual Market Model\n",
        "# using market data.\n",
        "# Here, we'll simulate expected returns as a fraction of the market index\n",
        "df1['Expected Return'] = 0.001 * df1['Market Index Value']\n",
        "df2['Expected Return'] = 0.001 * df2['Market Index Value (for comparison)']\n",
        "\n",
        "# Calculate abnormal returns\n",
        "df1['Abnormal Return'] = df1['Closing Stock Price'] - df1['Expected Return']\n",
        "df2['Abnormal Return'] = df2['Closing Stock Price'] - df2['Expected Return']\n",
        "\n",
        "\n",
        "# 3. Paired t-test\n",
        "# Perform paired t-test on abnormal returns (or closing stock prices)\n",
        "t_stat_df1, p_val_df1 = stats.ttest_rel(\n",
        "    df1[df1['Period'] == 'Pre-Restructuring']['Abnormal Return'],\n",
        "    df1[df1['Period'] == 'Post-Restructuring']['Abnormal Return']\n",
        ")\n",
        "\n",
        "t_stat_df2, p_val_df2 = stats.ttest_rel(\n",
        "    df2[df2['Period'] == 'Pre-Restructuring']['Abnormal Return'],\n",
        "    df2[df2['Period'] == 'Post-Restructuring']['Abnormal Return']\n",
        ")\n",
        "\n",
        "print(\"\\nPaired t-test results for df1:\")\n",
        "print(f\"T-statistic: {t_stat_df1:.4f}, P-value: {p_val_df1:.4f}\")\n",
        "print(\"\\nPaired t-test results for df2:\")\n",
        "print(f\"T-statistic: {t_stat_df2:.4f}, P-value: {p_val_df2:.4f}\")\n",
        "\n",
        "# 4. Multiple Regression Analysis\n",
        "# Prepare independent variables (add a constant)\n",
        "X_df1 = sm.add_constant(df1[['Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']])\n",
        "y_df1 = df1['Abnormal Return']\n",
        "X_df2 = sm.add_constant(df2[['Return on Assets (ROA)', 'Return on Equity (ROE)', 'Trading Volume']])\n",
        "y_df2 = df2['Abnormal Return']\n",
        "\n",
        "# Fit the regression model\n",
        "model_df1 = sm.OLS(y_df1, X_df1).fit()\n",
        "model_df2 = sm.OLS(y_df2, X_df2).fit()\n",
        "\n",
        "# Print regression results\n",
        "print(\"\\nMultiple Regression Analysis for df1:\")\n",
        "print(model_df1.summary())\n",
        "print(\"\\nMultiple Regression Analysis for df2:\")\n",
        "print(model_df2.summary())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Tl45kM7407P",
        "outputId": "86c8abee-28f8-4ee3-c8bd-e98f30931223"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descriptive Statistics for df1:\n",
            "                    count      mean       std   min     25%  50%    75%  max\n",
            "Period                                                                      \n",
            "Post-Restructuring   22.0  4.009091  2.844696  0.45  1.8875  3.2  5.625  9.6\n",
            "\n",
            "Descriptive Statistics for df2:\n",
            "                    count      mean      std   min    25%    50%    75%   max\n",
            "Period                                                                       \n",
            "Post-Restructuring   22.0  8.509818  6.80748  0.55  3.525  9.258  9.258  25.6\n",
            "\n",
            "Paired t-test results for df1:\n",
            "T-statistic: nan, P-value: nan\n",
            "\n",
            "Paired t-test results for df2:\n",
            "T-statistic: nan, P-value: nan\n",
            "\n",
            "Multiple Regression Analysis for df1:\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.323\n",
            "Model:                            OLS   Adj. R-squared:                  0.210\n",
            "Method:                 Least Squares   F-statistic:                     2.860\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):             0.0658\n",
            "Time:                        11:50:17   Log-Likelihood:                -44.551\n",
            "No. Observations:                  22   AIC:                             97.10\n",
            "Df Residuals:                      18   BIC:                             101.5\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "const                     -0.5298      1.174     -0.451      0.657      -2.997       1.938\n",
            "Return on Assets (ROA)     0.1439      1.341      0.107      0.916      -2.673       2.961\n",
            "Return on Equity (ROE)    -0.3097      0.559     -0.553      0.587      -1.485       0.866\n",
            "Trading Volume         -2.382e-06   2.08e-06     -1.147      0.266   -6.74e-06    1.98e-06\n",
            "==============================================================================\n",
            "Omnibus:                        0.061   Durbin-Watson:                   1.077\n",
            "Prob(Omnibus):                  0.970   Jarque-Bera (JB):                0.097\n",
            "Skew:                          -0.070   Prob(JB):                        0.952\n",
            "Kurtosis:                       2.706   Cond. No.                     2.72e+06\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 2.72e+06. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "\n",
            "Multiple Regression Analysis for df2:\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.749\n",
            "Model:                            OLS   Adj. R-squared:                  0.708\n",
            "Method:                 Least Squares   F-statistic:                     17.95\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):           1.20e-05\n",
            "Time:                        11:50:17   Log-Likelihood:                -70.071\n",
            "No. Observations:                  22   AIC:                             148.1\n",
            "Df Residuals:                      18   BIC:                             152.5\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "const                      0.3303      4.724      0.070      0.945      -9.594      10.255\n",
            "Return on Assets (ROA)     1.7239      4.670      0.369      0.716      -8.086      11.534\n",
            "Return on Equity (ROE)     0.9939      1.608      0.618      0.544      -2.384       4.372\n",
            "Trading Volume         -3.919e-06   5.38e-06     -0.728      0.476   -1.52e-05    7.39e-06\n",
            "==============================================================================\n",
            "Omnibus:                        3.922   Durbin-Watson:                   0.989\n",
            "Prob(Omnibus):                  0.141   Jarque-Bera (JB):                2.313\n",
            "Skew:                           0.767   Prob(JB):                        0.315\n",
            "Kurtosis:                       3.411   Cond. No.                     3.94e+06\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 3.94e+06. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-e2a328080ab9>:25: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df1, p_val_df1 = stats.ttest_rel(\n",
            "<ipython-input-6-e2a328080ab9>:30: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df2, p_val_df2 = stats.ttest_rel(\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous paired t-test results are NaN due to the lack of 'Pre-Restructuring' data in both dataframes.  I will re-examine the data and try the t-test again, focusing on the 'Closing Stock Price' instead of the 'Abnormal Return'. Additionally, I will address the multicollinearity issue in the regression analysis by removing one highly correlated independent variable, and also add more independent variables which might improve the model.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "C5t3zQik432g"
      }
    },
    {
      "source": [
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# 3. Paired t-test (using Closing Stock Price since there's no pre-restructuring data)\n",
        "t_stat_df1, p_val_df1 = stats.ttest_ind(\n",
        "    df1[df1['Period'] == 'Pre-Restructuring']['Closing Stock Price'],\n",
        "    df1[df1['Period'] == 'Post-Restructuring']['Closing Stock Price']\n",
        ")\n",
        "\n",
        "t_stat_df2, p_val_df2 = stats.ttest_ind(\n",
        "    df2[df2['Period'] == 'Pre-Restructuring']['Closing Stock Price'],\n",
        "    df2[df2['Period'] == 'Post-Restructuring']['Closing Stock Price']\n",
        ")\n",
        "\n",
        "print(\"\\nPaired t-test results for df1 (using Closing Stock Price):\")\n",
        "print(f\"T-statistic: {t_stat_df1:.4f}, P-value: {p_val_df1:.4f}\")\n",
        "print(\"\\nPaired t-test results for df2 (using Closing Stock Price):\")\n",
        "print(f\"T-statistic: {t_stat_df2:.4f}, P-value: {p_val_df2:.4f}\")\n",
        "\n",
        "\n",
        "# 4. Multiple Regression Analysis (addressing multicollinearity and adding variables)\n",
        "# Removing one variable and trying to add more\n",
        "X_df1 = sm.add_constant(df1[['Return on Assets (ROA)', 'Trading Volume', 'Year']])\n",
        "y_df1 = df1['Closing Stock Price']\n",
        "X_df2 = sm.add_constant(df2[['Return on Assets (ROA)', 'Trading Volume', 'Year']])\n",
        "y_df2 = df2['Closing Stock Price']\n",
        "\n",
        "# Fit the regression model\n",
        "model_df1 = sm.OLS(y_df1, X_df1).fit()\n",
        "model_df2 = sm.OLS(y_df2, X_df2).fit()\n",
        "\n",
        "# Print regression results\n",
        "print(\"\\nMultiple Regression Analysis for df1 (improved):\")\n",
        "print(model_df1.summary())\n",
        "print(\"\\nMultiple Regression Analysis for df2 (improved):\")\n",
        "print(model_df2.summary())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hJxUTnj-44GQ",
        "outputId": "f1107c0a-e274-4a94-c7dc-302245811e8b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Paired t-test results for df1 (using Closing Stock Price):\n",
            "T-statistic: nan, P-value: nan\n",
            "\n",
            "Paired t-test results for df2 (using Closing Stock Price):\n",
            "T-statistic: nan, P-value: nan\n",
            "\n",
            "Multiple Regression Analysis for df1 (improved):\n",
            "                             OLS Regression Results                            \n",
            "===============================================================================\n",
            "Dep. Variable:     Closing Stock Price   R-squared:                       0.382\n",
            "Model:                             OLS   Adj. R-squared:                  0.279\n",
            "Method:                  Least Squares   F-statistic:                     3.711\n",
            "Date:                 Sun, 30 Mar 2025   Prob (F-statistic):             0.0308\n",
            "Time:                         11:50:25   Log-Likelihood:                -48.409\n",
            "No. Observations:                   22   AIC:                             104.8\n",
            "Df Residuals:                       18   BIC:                             109.2\n",
            "Df Model:                            3                                         \n",
            "Covariance Type:             nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "const                     55.0023    266.957      0.206      0.839    -505.853     615.858\n",
            "Return on Assets (ROA)     0.1644      0.593      0.277      0.785      -1.082       1.410\n",
            "Trading Volume          5.367e-06   2.55e-06      2.101      0.050    9.21e-11    1.07e-05\n",
            "Year                      -0.0274      0.133     -0.206      0.839      -0.306       0.251\n",
            "==============================================================================\n",
            "Omnibus:                        2.159   Durbin-Watson:                   1.880\n",
            "Prob(Omnibus):                  0.340   Jarque-Bera (JB):                1.736\n",
            "Skew:                           0.551   Prob(JB):                        0.420\n",
            "Kurtosis:                       2.176   Cond. No.                     4.08e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.08e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "\n",
            "Multiple Regression Analysis for df2 (improved):\n",
            "                             OLS Regression Results                            \n",
            "===============================================================================\n",
            "Dep. Variable:     Closing Stock Price   R-squared:                       0.497\n",
            "Model:                             OLS   Adj. R-squared:                  0.444\n",
            "Method:                  Least Squares   F-statistic:                     9.376\n",
            "Date:                 Sun, 30 Mar 2025   Prob (F-statistic):            0.00147\n",
            "Time:                         11:50:25   Log-Likelihood:                -65.349\n",
            "No. Observations:                   22   AIC:                             136.7\n",
            "Df Residuals:                       19   BIC:                             140.0\n",
            "Df Model:                            2                                         \n",
            "Covariance Type:             nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "Return on Assets (ROA)     2.4218      0.630      3.842      0.001       1.102       3.741\n",
            "Trading Volume          2.134e-06   3.84e-06      0.556      0.585    -5.9e-06    1.02e-05\n",
            "Year                       0.0037      0.002      2.060      0.053   -6.04e-05       0.008\n",
            "==============================================================================\n",
            "Omnibus:                        7.937   Durbin-Watson:                   1.195\n",
            "Prob(Omnibus):                  0.019   Jarque-Bera (JB):                5.862\n",
            "Skew:                           0.879   Prob(JB):                       0.0533\n",
            "Kurtosis:                       4.818   Cond. No.                     5.90e+05\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.9e+05. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-7-2f12b0ef2ee6>:5: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df1, p_val_df1 = stats.ttest_ind(\n",
            "<ipython-input-7-2f12b0ef2ee6>:10: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df2, p_val_df2 = stats.ttest_ind(\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data analysis\n",
        "\n",
        "### Subtask:\n",
        "Perform descriptive and inferential statistical analysis on the prepared datasets.  Address the limitations of the previous attempt.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "2QlLqbgr48a8"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Calculate descriptive statistics for 'Closing Stock Price' grouped by 'Period' in both dataframes. Then, perform a robust market model analysis using linear regression, calculate abnormal returns, and conduct an independent samples t-test. Finally, perform multiple regression analysis, addressing multicollinearity.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "tzUDtW5n4-es"
      }
    },
    {
      "source": [
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# 1. Descriptive Statistics\n",
        "print(\"Descriptive Statistics for Closing Stock Price by Period:\")\n",
        "print(\"DataFrame 1:\")\n",
        "display(df1.groupby('Period')['Closing Stock Price'].describe())\n",
        "print(\"\\nDataFrame 2:\")\n",
        "display(df2.groupby('Period')['Closing Stock Price'].describe())\n",
        "\n",
        "# 2. Robust Market Model and Abnormal Returns Calculation\n",
        "def market_model_analysis(df, market_index_col, closing_price_col):\n",
        "    # Use rolling window linear regression for market model\n",
        "    df['Expected Return'] = 0\n",
        "    for i in range(60, len(df)):  # Assuming at least 60 data points are available for rolling window\n",
        "        X = df[market_index_col][i - 60:i]\n",
        "        y = df[closing_price_col][i - 60:i]\n",
        "        X = sm.add_constant(X)  # Adding a constant term\n",
        "        model = sm.OLS(y, X).fit()\n",
        "        df.loc[df.index[i], 'Expected Return'] = model.params[0] + model.params[1] * df[market_index_col][i]\n",
        "    df['Abnormal Return'] = df[closing_price_col] - df['Expected Return']\n",
        "    return df\n",
        "\n",
        "# Market Model analysis for df1\n",
        "df1 = market_model_analysis(df1, 'Market Index Value', 'Closing Stock Price')\n",
        "\n",
        "# Market Model analysis for df2\n",
        "df2 = market_model_analysis(df2, 'Market Index Value (for comparison)', 'Closing Stock Price')\n",
        "\n",
        "# 3. Independent Samples t-test\n",
        "t_stat_df1, p_val_df1 = stats.ttest_ind(\n",
        "    df1[df1['Period'] == 'Pre-Restructuring']['Abnormal Return'],\n",
        "    df1[df1['Period'] == 'Post-Restructuring']['Abnormal Return']\n",
        ")\n",
        "t_stat_df2, p_val_df2 = stats.ttest_ind(\n",
        "    df2[df2['Period'] == 'Pre-Restructuring']['Abnormal Return'],\n",
        "    df2[df2['Period'] == 'Post-Restructuring']['Abnormal Return']\n",
        ")\n",
        "print(\"\\nIndependent Samples t-test results:\")\n",
        "print(f\"DataFrame 1: T-statistic={t_stat_df1:.4f}, P-value={p_val_df1:.4f}\")\n",
        "print(f\"DataFrame 2: T-statistic={t_stat_df2:.4f}, P-value={p_val_df2:.4f}\")\n",
        "\n",
        "# 4. Multiple Regression Analysis\n",
        "X_df1 = sm.add_constant(df1[['Return on Assets (ROA)', 'Trading Volume', 'Year']])\n",
        "y_df1 = df1['Abnormal Return']\n",
        "X_df2 = sm.add_constant(df2[['Return on Assets (ROA)', 'Trading Volume', 'Year']])\n",
        "y_df2 = df2['Abnormal Return']\n",
        "\n",
        "model_df1 = sm.OLS(y_df1, X_df1).fit()\n",
        "model_df2 = sm.OLS(y_df2, X_df2).fit()\n",
        "print(\"\\nMultiple Regression Analysis Results:\")\n",
        "print(\"DataFrame 1:\")\n",
        "print(model_df1.summary())\n",
        "print(\"\\nDataFrame 2:\")\n",
        "print(model_df2.summary())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "oMpUb5u24-ud",
        "outputId": "4ba5d82d-40be-4a97-b6f3-3c9c61255019"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Descriptive Statistics for Closing Stock Price by Period:\n",
            "DataFrame 1:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                    count      mean       std   min     25%  50%    75%  max\n",
              "Period                                                                      \n",
              "Post-Restructuring   22.0  4.009091  2.844696  0.45  1.8875  3.2  5.625  9.6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90c372fe-42d8-44cc-a265-cd9d3fd68f28\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Period</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Post-Restructuring</th>\n",
              "      <td>22.0</td>\n",
              "      <td>4.009091</td>\n",
              "      <td>2.844696</td>\n",
              "      <td>0.45</td>\n",
              "      <td>1.8875</td>\n",
              "      <td>3.2</td>\n",
              "      <td>5.625</td>\n",
              "      <td>9.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90c372fe-42d8-44cc-a265-cd9d3fd68f28')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-90c372fe-42d8-44cc-a265-cd9d3fd68f28 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-90c372fe-42d8-44cc-a265-cd9d3fd68f28');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(model_df2\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 22.0,\n        \"max\": 22.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.009090909090909,\n        \"max\": 4.009090909090909,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.009090909090909\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.844695831243539,\n        \"max\": 2.844695831243539,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.844695831243539\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.45,\n        \"max\": 0.45,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8875,\n        \"max\": 1.8875,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.2,\n        \"max\": 3.2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.625,\n        \"max\": 5.625,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.6,\n        \"max\": 9.6,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame 2:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                    count      mean      std   min    25%    50%    75%   max\n",
              "Period                                                                       \n",
              "Post-Restructuring   22.0  8.509818  6.80748  0.55  3.525  9.258  9.258  25.6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f5ea5245-ab17-4f86-b964-27ef4a95aa09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Period</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Post-Restructuring</th>\n",
              "      <td>22.0</td>\n",
              "      <td>8.509818</td>\n",
              "      <td>6.80748</td>\n",
              "      <td>0.55</td>\n",
              "      <td>3.525</td>\n",
              "      <td>9.258</td>\n",
              "      <td>9.258</td>\n",
              "      <td>25.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5ea5245-ab17-4f86-b964-27ef4a95aa09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f5ea5245-ab17-4f86-b964-27ef4a95aa09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f5ea5245-ab17-4f86-b964-27ef4a95aa09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(model_df2\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Period\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Post-Restructuring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 22.0,\n        \"max\": 22.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 8.509818181818183,\n        \"max\": 8.509818181818183,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8.509818181818183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.807479525432117,\n        \"max\": 6.807479525432117,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.807479525432117\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.55,\n        \"max\": 0.55,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.55\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.525,\n        \"max\": 3.525,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.525\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.258,\n        \"max\": 9.258,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.258,\n        \"max\": 9.258,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 25.6,\n        \"max\": 25.6,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          25.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Independent Samples t-test results:\n",
            "DataFrame 1: T-statistic=nan, P-value=nan\n",
            "DataFrame 2: T-statistic=nan, P-value=nan\n",
            "\n",
            "Multiple Regression Analysis Results:\n",
            "DataFrame 1:\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.382\n",
            "Model:                            OLS   Adj. R-squared:                  0.279\n",
            "Method:                 Least Squares   F-statistic:                     3.711\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):             0.0308\n",
            "Time:                        11:50:53   Log-Likelihood:                -48.409\n",
            "No. Observations:                  22   AIC:                             104.8\n",
            "Df Residuals:                      18   BIC:                             109.2\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "const                     55.0023    266.957      0.206      0.839    -505.853     615.858\n",
            "Return on Assets (ROA)     0.1644      0.593      0.277      0.785      -1.082       1.410\n",
            "Trading Volume          5.367e-06   2.55e-06      2.101      0.050    9.21e-11    1.07e-05\n",
            "Year                      -0.0274      0.133     -0.206      0.839      -0.306       0.251\n",
            "==============================================================================\n",
            "Omnibus:                        2.159   Durbin-Watson:                   1.880\n",
            "Prob(Omnibus):                  0.340   Jarque-Bera (JB):                1.736\n",
            "Skew:                           0.551   Prob(JB):                        0.420\n",
            "Kurtosis:                       2.176   Cond. No.                     4.08e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.08e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "\n",
            "DataFrame 2:\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.497\n",
            "Model:                            OLS   Adj. R-squared:                  0.444\n",
            "Method:                 Least Squares   F-statistic:                     9.376\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):            0.00147\n",
            "Time:                        11:50:53   Log-Likelihood:                -65.349\n",
            "No. Observations:                  22   AIC:                             136.7\n",
            "Df Residuals:                      19   BIC:                             140.0\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "Return on Assets (ROA)     2.4218      0.630      3.842      0.001       1.102       3.741\n",
            "Trading Volume          2.134e-06   3.84e-06      0.556      0.585    -5.9e-06    1.02e-05\n",
            "Year                       0.0037      0.002      2.060      0.053   -6.04e-05       0.008\n",
            "==============================================================================\n",
            "Omnibus:                        7.937   Durbin-Watson:                   1.195\n",
            "Prob(Omnibus):                  0.019   Jarque-Bera (JB):                5.862\n",
            "Skew:                           0.879   Prob(JB):                       0.0533\n",
            "Kurtosis:                       4.818   Cond. No.                     5.90e+05\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.9e+05. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-eddef9bed8cb>:31: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df1, p_val_df1 = stats.ttest_ind(\n",
            "<ipython-input-8-eddef9bed8cb>:35: SmallSampleWarning: One or more sample arguments is too small; all returned values will be NaN. See documentation for sample size requirements.\n",
            "  t_stat_df2, p_val_df2 = stats.ttest_ind(\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data visualization\n",
        "\n",
        "### Subtask:\n",
        "Visualize the key findings from the data analysis, focusing on the distribution of stock prices and abnormal returns, the results of the t-test (if applicable), and the relationships identified in the regression analysis.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "3AEoY6Gj5DJ-"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Visualize the key findings from the data analysis using histograms, density plots, scatter plots, and regression lines. Combine these visualizations into a single figure with subplots.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "u2Y_JONw5Eot"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "plt.figure(figsize=(20, 15))\n",
        "\n",
        "# Stock Price Distribution\n",
        "plt.subplot(2, 2, 1)\n",
        "sns.histplot(df1[df1['Period'] == 'Post-Restructuring']['Closing Stock Price'], label='Post-Restructuring', color='skyblue', kde=True)\n",
        "plt.xlabel('Closing Stock Price')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Closing Stock Price (df1)')\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(2, 2, 2)\n",
        "sns.histplot(df2[df2['Period'] == 'Post-Restructuring']['Closing Stock Price'], label='Post-Restructuring', color='orange', kde=True)\n",
        "plt.xlabel('Closing Stock Price')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Closing Stock Price (df2)')\n",
        "plt.legend()\n",
        "\n",
        "# Abnormal Return Visualization\n",
        "plt.subplot(2, 2, 3)\n",
        "sns.histplot(df1[df1['Period'] == 'Post-Restructuring']['Abnormal Return'], label='Post-Restructuring', color='skyblue', kde=True)\n",
        "plt.xlabel('Abnormal Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Abnormal Return (df1)')\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(2, 2, 4)\n",
        "sns.histplot(df2[df2['Period'] == 'Post-Restructuring']['Abnormal Return'], label='Post-Restructuring', color='orange', kde=True)\n",
        "plt.xlabel('Abnormal Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Abnormal Return (df2)')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Regression Analysis Visualization (Example: ROA vs. Abnormal Return for df1)\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.regplot(x='Return on Assets (ROA)', y='Abnormal Return', data=df1, color='skyblue')\n",
        "plt.xlabel('Return on Assets (ROA)')\n",
        "plt.ylabel('Abnormal Return')\n",
        "plt.title('ROA vs. Abnormal Return (df1)')\n",
        "\n",
        "# Regression Analysis Visualization (Example: ROA vs. Abnormal Return for df2)\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.regplot(x='Return on Assets (ROA)', y='Abnormal Return', data=df2, color='orange')\n",
        "plt.xlabel('Return on Assets (ROA)')\n",
        "plt.ylabel('Abnormal Return')\n",
        "plt.title('ROA vs. Abnormal Return (df2)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "CPSnf4x_5E4f",
        "outputId": "bf24e19f-5841-48f3-8782-67c16fe04c67"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Model evaluation\n",
        "\n",
        "### Subtask:\n",
        "Evaluate the statistical significance of the paired t-test and multiple regression analysis performed in the previous step. Assess the goodness of fit of the regression model.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "S1NcwulP5Jy6"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Evaluate the statistical significance of the paired t-test and multiple regression analysis. Assess the goodness of fit of the regression model. Examine p-values from paired t-tests, R-squared, adjusted R-squared, coefficients, and condition number from the regression output. Summarize the evaluation, noting any limitations or suggestions for improvement.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "hqMw4wTO5LP4"
      }
    },
    {
      "source": [
        "# Evaluate the paired t-test results\n",
        "print(\"\\nPaired t-test results (df1):\")\n",
        "if 'p_val_df1' in locals() and not pd.isna(p_val_df1):\n",
        "    print(f\"P-value: {p_val_df1:.4f}\")\n",
        "    if p_val_df1 < 0.05:\n",
        "        print(\"The difference in abnormal returns is statistically significant for df1.\")\n",
        "    else:\n",
        "        print(\"The difference in abnormal returns is not statistically significant for df1.\")\n",
        "else:\n",
        "    print(\"Paired t-test results not available for df1.  Likely due to missing pre-restructuring data.\")\n",
        "\n",
        "print(\"\\nPaired t-test results (df2):\")\n",
        "if 'p_val_df2' in locals() and not pd.isna(p_val_df2):\n",
        "    print(f\"P-value: {p_val_df2:.4f}\")\n",
        "    if p_val_df2 < 0.05:\n",
        "        print(\"The difference in abnormal returns is statistically significant for df2.\")\n",
        "    else:\n",
        "        print(\"The difference in abnormal returns is not statistically significant for df2.\")\n",
        "else:\n",
        "    print(\"Paired t-test results not available for df2. Likely due to missing pre-restructuring data.\")\n",
        "\n",
        "# Evaluate the multiple regression models\n",
        "print(\"\\nMultiple Regression Analysis Summary (df1):\")\n",
        "if 'model_df1' in locals():\n",
        "    print(model_df1.summary())\n",
        "    print(f\"R-squared: {model_df1.rsquared:.4f}\")\n",
        "    print(f\"Adjusted R-squared: {model_df1.rsquared_adj:.4f}\")\n",
        "    print(f\"Condition Number: {model_df1.condition_number:.4f}\")\n",
        "    if model_df1.condition_number > 20:\n",
        "      print(\"Warning: High condition number indicates potential multicollinearity.\")\n",
        "\n",
        "else:\n",
        "    print(\"Multiple Regression Model not available for df1.\")\n",
        "\n",
        "print(\"\\nMultiple Regression Analysis Summary (df2):\")\n",
        "if 'model_df2' in locals():\n",
        "    print(model_df2.summary())\n",
        "    print(f\"R-squared: {model_df2.rsquared:.4f}\")\n",
        "    print(f\"Adjusted R-squared: {model_df2.rsquared_adj:.4f}\")\n",
        "    print(f\"Condition Number: {model_df2.condition_number:.4f}\")\n",
        "    if model_df2.condition_number > 20:\n",
        "      print(\"Warning: High condition number indicates potential multicollinearity.\")\n",
        "else:\n",
        "    print(\"Multiple Regression Model not available for df2.\")\n"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZm3ljL35Lfq",
        "outputId": "7f2c5962-44dc-479c-d6e2-b05f868efd1e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Paired t-test results (df1):\n",
            "Paired t-test results not available for df1.  Likely due to missing pre-restructuring data.\n",
            "\n",
            "Paired t-test results (df2):\n",
            "Paired t-test results not available for df2. Likely due to missing pre-restructuring data.\n",
            "\n",
            "Multiple Regression Analysis Summary (df1):\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.382\n",
            "Model:                            OLS   Adj. R-squared:                  0.279\n",
            "Method:                 Least Squares   F-statistic:                     3.711\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):             0.0308\n",
            "Time:                        11:51:45   Log-Likelihood:                -48.409\n",
            "No. Observations:                  22   AIC:                             104.8\n",
            "Df Residuals:                      18   BIC:                             109.2\n",
            "Df Model:                           3                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "const                     55.0023    266.957      0.206      0.839    -505.853     615.858\n",
            "Return on Assets (ROA)     0.1644      0.593      0.277      0.785      -1.082       1.410\n",
            "Trading Volume          5.367e-06   2.55e-06      2.101      0.050    9.21e-11    1.07e-05\n",
            "Year                      -0.0274      0.133     -0.206      0.839      -0.306       0.251\n",
            "==============================================================================\n",
            "Omnibus:                        2.159   Durbin-Watson:                   1.880\n",
            "Prob(Omnibus):                  0.340   Jarque-Bera (JB):                1.736\n",
            "Skew:                           0.551   Prob(JB):                        0.420\n",
            "Kurtosis:                       2.176   Cond. No.                     4.08e+08\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.08e+08. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "R-squared: 0.3821\n",
            "Adjusted R-squared: 0.2792\n",
            "Condition Number: 407558521.2562\n",
            "Warning: High condition number indicates potential multicollinearity.\n",
            "\n",
            "Multiple Regression Analysis Summary (df2):\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:        Abnormal Return   R-squared:                       0.497\n",
            "Model:                            OLS   Adj. R-squared:                  0.444\n",
            "Method:                 Least Squares   F-statistic:                     9.376\n",
            "Date:                Sun, 30 Mar 2025   Prob (F-statistic):            0.00147\n",
            "Time:                        11:51:45   Log-Likelihood:                -65.349\n",
            "No. Observations:                  22   AIC:                             136.7\n",
            "Df Residuals:                      19   BIC:                             140.0\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==========================================================================================\n",
            "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------\n",
            "Return on Assets (ROA)     2.4218      0.630      3.842      0.001       1.102       3.741\n",
            "Trading Volume          2.134e-06   3.84e-06      0.556      0.585    -5.9e-06    1.02e-05\n",
            "Year                       0.0037      0.002      2.060      0.053   -6.04e-05       0.008\n",
            "==============================================================================\n",
            "Omnibus:                        7.937   Durbin-Watson:                   1.195\n",
            "Prob(Omnibus):                  0.019   Jarque-Bera (JB):                5.862\n",
            "Skew:                           0.879   Prob(JB):                       0.0533\n",
            "Kurtosis:                       4.818   Cond. No.                     5.90e+05\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 5.9e+05. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n",
            "R-squared: 0.4967\n",
            "Adjusted R-squared: 0.4437\n",
            "Condition Number: 589546.9743\n",
            "Warning: High condition number indicates potential multicollinearity.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Summary:\n",
        "\n",
        "### 1. Q&A\n",
        "\n",
        "* **What is the impact of debt restructuring on stock prices?**  The analysis aimed to determine this, but the paired t-tests failed due to a lack of pre-restructuring data.  Multiple regression analysis was performed, but the results were limited by multicollinearity.  While the models for both dataframes were run, only the model for `df2` showed a statistically significant predictor variable ('Return on Assets (ROA)').  The high condition number in both models indicates multicollinearity issues, suggesting that the results may not be reliable.\n",
        "\n",
        "* **Are there statistically significant differences in stock prices or abnormal returns before and after restructuring?**  The paired t-tests could not be performed due to missing pre-restructuring data.\n",
        "\n",
        "* **How do firm-specific factors influence stock price reactions to restructuring announcements?** Multiple regression analysis was used to investigate this, but multicollinearity among the predictor variables makes the interpretation of individual predictor effects unreliable.\n",
        "\n",
        "\n",
        "### 2. Data Analysis Key Findings\n",
        "\n",
        "* **Missing Pre-Restructuring Data:** The absence of pre-restructuring data prevented the successful execution of paired t-tests to compare stock prices or abnormal returns before and after restructuring in both datasets.\n",
        "* **Multicollinearity Issues:** Multiple regression models showed extremely high condition numbers (4.08e+08 for `df1` and 5.90e+05 for `df2`), indicating substantial multicollinearity among the predictor variables ('Return on Assets (ROA)', 'Trading Volume', and 'Year'). This significantly impacts the reliability of the regression coefficients and their interpretations.\n",
        "* **Model Performance:** The multiple regression model for `df2` had a higher adjusted R-squared (0.444) compared to the model for `df1` (0.279), suggesting a better fit for explaining the variance in abnormal returns.  However, the presence of multicollinearity undermines the reliability of this finding.\n",
        "* **Significant Predictor (df2):** In the `df2` model, 'Return on Assets (ROA)' was a statistically significant predictor of abnormal returns (p < 0.001).\n",
        "\n",
        "\n",
        "### 3. Insights or Next Steps\n",
        "\n",
        "* **Address Data Limitations:** Prioritize obtaining pre-restructuring data or exploring robust imputation methods to enable paired t-tests and a more complete analysis of the restructuring impact.\n",
        "* **Mitigate Multicollinearity:** Address the multicollinearity issue in the regression models using techniques like feature selection, PCA, or regularization. This is crucial for drawing reliable conclusions about the influence of firm-specific factors.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "8GYl5Egm5Q6p"
      }
    }
  ]
}